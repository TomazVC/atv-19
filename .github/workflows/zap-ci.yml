name: OWASP ZAP Security Scan - ClickSeguro

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap-security-scan:
    runs-on: ubuntu-latest
    name: Scan de Seguran√ßa com OWASP ZAP

    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instala depend√™ncias
        run: npm install

      - name: Inicia aplica√ß√£o ClickSeguro
        run: |
          echo "Iniciando aplica√ß√£o ClickSeguro..."
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          echo "Aguardando aplica√ß√£o responder..."
          for i in {1..30}; do
            if curl -fsS http://localhost:3000/health > /dev/null 2>&1; then
              echo "Aplica√ß√£o respondendo!"
              
              # Testa as rotas vulner√°veis
              echo "Testando rotas vulner√°veis:"
              curl -s http://localhost:3000/ | head -5
              curl -s "http://localhost:3000/search?q=test" | head -5
              curl -s "http://localhost:3000/echo?msg=hello" | head -5
              
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timeout: aplica√ß√£o n√£o respondeu"
              exit 1
            fi
            sleep 2
          done

      - name: Obt√©m IP do host para o Docker acessar
        run: |
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV
          echo "IP do host: $HOST_IP"

      - name: Executa OWASP ZAP Full Scan via Docker
        run: |
          docker run --rm \
            --network="host" \
            -v $(pwd):/zap/wrk:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://localhost:3000 \
            -r zap-report.html \
            -J zap-report.json \
            -a \
            -j \
            -m 3 \
            -d || true
          
          echo "Scan conclu√≠do!"
          echo "Listando todos os arquivos gerados:"
          find . -name "*.html" -o -name "*.json" | grep -E "(zap|report)" || echo "Nenhum arquivo zap/report encontrado"
          ls -lh zap-report.* 2>/dev/null || echo "zap-report.* n√£o encontrados no diret√≥rio atual"

      - name: Verifica arquivos gerados
        if: always()
        run: |
          echo "=== Arquivos no diret√≥rio atual ==="
          ls -lah
          echo ""
          
          # Verifica se os arquivos foram gerados
          if [ ! -f "zap-report.json" ]; then
            echo "AVISO: zap-report.json n√£o encontrado, criando estrutura vazia"
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
          fi
          
          if [ ! -f "zap-report.html" ]; then
            echo "AVISO: zap-report.html n√£o encontrado, criando placeholder"
            cat > zap-report.html << 'EOF'
<!DOCTYPE html>
<html>
<head><title>ZAP Scan Report</title></head>
<body>
<h1>OWASP ZAP Scan Report - ClickSeguro</h1>
<p><strong>Status:</strong> Scan executado mas relat√≥rio HTML n√£o foi gerado pelo ZAP.</p>
<p>Verifique os logs do step "Executa OWASP ZAP Full Scan via Docker" para mais detalhes.</p>
<p>O relat√≥rio JSON pode conter mais informa√ß√µes.</p>
</body>
</html>
EOF
          fi
          
          echo "=== Conte√∫do do zap-report.json ==="
          if [ -f "zap-report.json" ]; then
            cat zap-report.json | jq '.' || cat zap-report.json
          else
            echo "Arquivo n√£o encontrado!"
          fi
          echo ""
          echo "=== Verificando zap-report.html ==="
          if [ -f "zap-report.html" ]; then
            ls -lh zap-report.html
            echo "Tamanho e tipo:"
            file zap-report.html
            echo "Primeiras 10 linhas:"
            head -10 zap-report.html
          else
            echo "Arquivo HTML n√£o encontrado!"
          fi

      - name: Instala jq para an√°lise
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analisa vulnerabilidades
        if: always()
        id: zapcheck
        run: |
          if [ ! -f "zap-report.json" ]; then
            echo "JSON n√£o encontrado, criando estrutura vazia"
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
          fi

          total=$(jq '.site[0].alerts | length' zap-report.json)
          info=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-report.json)
          low=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-report.json)
          medium=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-report.json)
          high=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-report.json)
          critical=$(jq '[.site[0].alerts[] | select(.riskcode=="4")] | length' zap-report.json)

          echo "total=$total" >> $GITHUB_OUTPUT
          echo "info=$info" >> $GITHUB_OUTPUT
          echo "low=$low" >> $GITHUB_OUTPUT
          echo "medium=$medium" >> $GITHUB_OUTPUT
          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT

          echo "## Relat√≥rio de Seguran√ßa - ClickSeguro" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resumo de Vulnerabilidades por Severidade:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $critical |" >> $GITHUB_STEP_SUMMARY
          echo "| High | $high |" >> $GITHUB_STEP_SUMMARY
          echo "| Medium | $medium |" >> $GITHUB_STEP_SUMMARY
          echo "| Low | $low |" >> $GITHUB_STEP_SUMMARY
          echo "| Info | $info |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Top 10 Vulnerabilidades
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Top 10 Vulnerabilidades mais Comuns:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "zap-report.json" ] && [ "$(jq '.site[0].alerts | length' zap-report.json)" -gt 0 ]; then
            jq -r '.site[0].alerts[] | .name' zap-report.json \
              | sort | uniq -c | sort -nr | head -10 \
              | awk '{count=$1; $1=""; name=substr($0,2); printf "- %s (%d ocorr√™ncias)\n", name, count }' \
              >> $GITHUB_STEP_SUMMARY
          else
            echo "_Nenhuma vulnerabilidade detectada pelo scan_" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload dos Relat√≥rios
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report-clickseguro
          path: |
            zap-report.html
            zap-report.json
          retention-days: 30

      - name: Verifica crit√©rios de falha
        if: always()
        run: |
          high=${{ steps.zapcheck.outputs.high }}
          critical=${{ steps.zapcheck.outputs.critical }}
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## An√°lise de Seguran√ßa" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "### Status: FALHOU" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Vulnerabilidades cr√≠ticas detectadas:**" >> $GITHUB_STEP_SUMMARY
            echo "- High: $high" >> $GITHUB_STEP_SUMMARY
            echo "- Critical: $critical" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "O deploy foi bloqueado automaticamente." >> $GITHUB_STEP_SUMMARY
            
            exit 1
          else
            echo "### Status: APROVADO" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Nenhuma vulnerabilidade cr√≠tica foi detectada." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Finaliza aplica√ß√£o
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID 2>/dev/null || true
          fi
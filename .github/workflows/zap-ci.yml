name: OWASP ZAP Security Scan - ClickSeguro

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap-security-scan:
    runs-on: ubuntu-latest
    name: Scan de Segurança com OWASP ZAP

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Instala dependências
        run: npm install

      - name: 🚀 Inicia aplicação ClickSeguro
        run: |
          echo "🚀 Iniciando aplicação ClickSeguro..."
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Aguarda aplicação subir
          echo "⏳ Aguardando aplicação responder..."
          for i in {1..30}; do
            if curl -fsS http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Aplicação respondendo!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Timeout: aplicação não respondeu"
              exit 1
            fi
            sleep 2
          done

      - name: 🔍 OWASP ZAP Full Scan (Ativo)
        uses: zaproxy/action-full-scan@v0.11.0
        continue-on-error: true
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a -j -m 5 -J zap-report.json -r zap-report.html'
          allow_issue_writing: false

      - name: 📊 Instala jq para análise
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 📈 Analisa vulnerabilidades
        if: always()
        id: zapcheck
        run: |
          if [ ! -f "zap-report.json" ]; then
            echo "⚠️ Arquivo zap-report.json não encontrado!"
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
          fi

          total=$(jq '.site[0].alerts | length' zap-report.json)
          info=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-report.json)
          low=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-report.json)
          medium=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-report.json)
          high=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-report.json)
          critical=$(jq '[.site[0].alerts[] | select(.riskcode=="4")] | length' zap-report.json)

          echo "total=$total" >> $GITHUB_OUTPUT
          echo "info=$info" >> $GITHUB_OUTPUT
          echo "low=$low" >> $GITHUB_OUTPUT
          echo "medium=$medium" >> $GITHUB_OUTPUT
          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT

          echo "## 🛡️ Relatório de Segurança - ClickSeguro" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Resumo de Vulnerabilidades por Severidade:" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 **Critical** | $critical |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 **High** | $high |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 **Medium** | $medium |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 **Low** | $low |" >> $GITHUB_STEP_SUMMARY
          echo "| ℹ️ **Info** | $info |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🧷 Top 10 Vulnerabilidades
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Top 10 Vulnerabilidades mais Comuns:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "zap-report.json" ]; then
            jq -r '.site[0].alerts[] | .name' zap-report.json \
              | sort | uniq -c | sort -nr | head -10 \
              | awk '{count=$1; $1=""; name=substr($0,2); printf "- %s (%d ocorrências)\n", name, count }' \
              >> $GITHUB_STEP_SUMMARY
          fi

      - name: � Upload dos Relatórios (SEMPRE executa)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report-clickseguro
          path: |
            zap-report.html
            zap-report.json
          retention-days: 30

      - name: 📋 Instruções para acessar relatórios
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## 📄 Relatórios Disponíveis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Os relatórios foram salvos como **Artifacts** deste workflow." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Como acessar:" >> $GITHUB_STEP_SUMMARY
          echo "1. Role esta página até o **FINAL** 👇" >> $GITHUB_STEP_SUMMARY
          echo "2. Procure pela seção **\"Artifacts\"**" >> $GITHUB_STEP_SUMMARY
          echo "3. Clique em **\"zap-report-clickseguro\"** para baixar" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Conteúdo do pacote:" >> $GITHUB_STEP_SUMMARY
          echo "- \`zap-report.html\` - Relatório visual completo" >> $GITHUB_STEP_SUMMARY
          echo "- \`zap-report.json\` - Dados estruturados (JSON)" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Verifica critérios de falha
        if: always()
        run: |
          high=${{ steps.zapcheck.outputs.high }}
          critical=${{ steps.zapcheck.outputs.critical }}
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "## ❌ PIPELINE FALHOU - VULNERABILIDADES CRÍTICAS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Motivo:** Encontradas **$high vulnerabilidades High** e **$critical vulnerabilidades Critical**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ O deploy foi **BLOQUEADO** automaticamente por questões de segurança." >> $GITHUB_STEP_SUMMARY
            
            exit 1
          else
            echo "## ✅ PIPELINE PASSOU - SEGURANÇA OK" >> $GITHUB_STEP_SUMMARY
            echo "Nenhuma vulnerabilidade crítica detectada!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🛑 Finaliza aplicação
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID 2>/dev/null || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Acesse os artefatos na aba **Actions** > **Este workflow** > **Artifacts**" >> $GITHUB_STEP_SUMMARY
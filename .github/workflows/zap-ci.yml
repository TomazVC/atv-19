name: OWASP ZAP Security Scan - ClickSeguro

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap-security-scan:
    runs-on: ubuntu-latest
    name: Scan de Seguran√ßa com OWASP ZAP

    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Instala depend√™ncias
        run: npm install

      - name: üöÄ Inicia aplica√ß√£o ClickSeguro
        run: |
          echo "üöÄ Iniciando aplica√ß√£o ClickSeguro..."
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Aguarda aplica√ß√£o subir
          echo "‚è≥ Aguardando aplica√ß√£o responder..."
          for i in {1..30}; do
            if curl -fsS http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ Aplica√ß√£o respondendo!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Timeout: aplica√ß√£o n√£o respondeu"
              exit 1
            fi
            sleep 2
          done

      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.11.0
        continue-on-error: true
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zapbaseline'
          cmd_options: '-a -j'

      - name: Verifica e organiza relat√≥rios do ZAP
        if: always()
        run: |
          echo "=== Listando todos os arquivos no workspace ==="
          ls -laR
          echo ""
          echo "=== Procurando arquivos de relat√≥rio ==="
          find . -type f \( -name "*.html" -o -name "*.json" -o -name "*.md" \) -ls
          echo ""
          
          # O action-full-scan salva os arquivos no workspace root
          # Vamos copiar para nomes padronizados
          if [ -f "report_html.html" ]; then
            cp report_html.html zap-report.html
            echo "‚úÖ report_html.html -> zap-report.html"
          elif [ -f "report.html" ]; then
            cp report.html zap-report.html
            echo "‚úÖ report.html -> zap-report.html"
          else
            echo "‚ö†Ô∏è HTML n√£o encontrado, gerando placeholder"
            echo "<html><body><h1>Scan executado mas HTML n√£o foi gerado</h1></body></html>" > zap-report.html
          fi
          
          if [ -f "report_json.json" ]; then
            cp report_json.json zap-report.json
            echo "‚úÖ report_json.json -> zap-report.json"
          elif [ -f "report.json" ]; then
            cp report.json zap-report.json
            echo "‚úÖ report.json -> zap-report.json"
          else
            echo "‚ö†Ô∏è JSON n√£o encontrado, gerando estrutura vazia"
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
          fi
          
          echo ""
          echo "=== Arquivos finais ==="
          ls -lh zap-report.* 2>/dev/null || echo "Nenhum arquivo zap-report.* criado"

      - name: Instala jq para an√°lise
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analisa vulnerabilidades
        if: always()
        id: zapcheck
        run: |
          # Tenta encontrar o arquivo JSON
          JSON_FILE=""
          if [ -f "zap-report.json" ]; then
            JSON_FILE="zap-report.json"
          elif [ -f "report.json" ]; then
            JSON_FILE="report.json"
          else
            echo "Arquivo JSON n√£o encontrado, criando vazio"
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
            JSON_FILE="zap-report.json"
          fi

          total=$(jq '.site[0].alerts | length' "$JSON_FILE")
          info=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' "$JSON_FILE")
          low=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' "$JSON_FILE")
          medium=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' "$JSON_FILE")
          high=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' "$JSON_FILE")
          critical=$(jq '[.site[0].alerts[] | select(.riskcode=="4")] | length' "$JSON_FILE")

          echo "total=$total" >> $GITHUB_OUTPUT
          echo "info=$info" >> $GITHUB_OUTPUT
          echo "low=$low" >> $GITHUB_OUTPUT
          echo "medium=$medium" >> $GITHUB_OUTPUT
          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT

          echo "## üõ°Ô∏è Relat√≥rio de Seguran√ßa - ClickSeguro" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Resumo de Vulnerabilidades por Severidade:" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ **Critical** | $critical |" >> $GITHUB_STEP_SUMMARY
          echo "| üü† **High** | $high |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° **Medium** | $medium |" >> $GITHUB_STEP_SUMMARY
          echo "| üîµ **Low** | $low |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ÑπÔ∏è **Info** | $info |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üß∑ Top 10 Vulnerabilidades
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Top 10 Vulnerabilidades mais Comuns:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "zap-report.json" ]; then
            jq -r '.site[0].alerts[] | .name' zap-report.json \
              | sort | uniq -c | sort -nr | head -10 \
              | awk '{count=$1; $1=""; name=substr($0,2); printf "- %s (%d ocorr√™ncias)\n", name, count }' \
              >> $GITHUB_STEP_SUMMARY
          fi

      - name: üì¶ Upload dos Relat√≥rios (SEMPRE executa)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report-clickseguro
          path: |
            zap-report.html
            zap-report.json
            report*.html
            report*.json
          retention-days: 30
          if-no-files-found: warn

      - name: üìã Instru√ß√µes para acessar relat√≥rios
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## üìÑ Relat√≥rios Dispon√≠veis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Os relat√≥rios foram salvos como **Artifacts** deste workflow." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Como acessar:" >> $GITHUB_STEP_SUMMARY
          echo "1. Role esta p√°gina at√© o **FINAL** üëá" >> $GITHUB_STEP_SUMMARY
          echo "2. Procure pela se√ß√£o **\"Artifacts\"**" >> $GITHUB_STEP_SUMMARY
          echo "3. Clique em **\"zap-report-clickseguro\"** para baixar" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Conte√∫do do pacote:" >> $GITHUB_STEP_SUMMARY
          echo "- \`zap-report.html\` - Relat√≥rio visual completo" >> $GITHUB_STEP_SUMMARY
          echo "- \`zap-report.json\` - Dados estruturados (JSON)" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Verifica crit√©rios de falha
        if: always()
        run: |
          high=${{ steps.zapcheck.outputs.high }}
          critical=${{ steps.zapcheck.outputs.critical }}
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "## ‚ùå PIPELINE FALHOU - VULNERABILIDADES CR√çTICAS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Motivo:** Encontradas **$high vulnerabilidades High** e **$critical vulnerabilidades Critical**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è O deploy foi **BLOQUEADO** automaticamente por quest√µes de seguran√ßa." >> $GITHUB_STEP_SUMMARY
            
            exit 1
          else
            echo "## ‚úÖ PIPELINE PASSOU - SEGURAN√áA OK" >> $GITHUB_STEP_SUMMARY
            echo "Nenhuma vulnerabilidade cr√≠tica detectada!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üõë Finaliza aplica√ß√£o
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID 2>/dev/null || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó Acesse os artefatos na aba **Actions** > **Este workflow** > **Artifacts**" >> $GITHUB_STEP_SUMMARY
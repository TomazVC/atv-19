name: OWASP ZAP Security Scan - ClickSeguro

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap-security-scan:
    runs-on: ubuntu-latest
    name: Scan de Seguran√ßa com OWASP ZAP

    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instala depend√™ncias
        run: npm install

      - name: Inicia aplica√ß√£o ClickSeguro em background
        run: |
          echo "Iniciando aplica√ß√£o ClickSeguro na porta 3000..."
          nohup npm start > app.log 2>&1 &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          echo "Aplica√ß√£o iniciada com PID: $APP_PID"
          
          echo "Aguardando aplica√ß√£o responder..."
          for i in {1..60}; do
            if curl -fsS http://localhost:3000/health > /dev/null 2>&1; then
              echo "Aplica√ß√£o respondendo com sucesso!"
              
              echo "Testando rotas vulner√°veis:"
              echo "1. Rota principal:"
              curl -s http://localhost:3000/ | head -3
              
              echo "2. Rota de busca (SQLi):"
              curl -s "http://localhost:3000/search?q=test" | head -3
              
              echo "3. Rota echo (XSS):"
              curl -s "http://localhost:3000/echo?msg=hello" | head -3
              
              echo "4. Rota admin (Path Traversal):"
              curl -s "http://localhost:3000/admin?file=test.txt" | head -3
              
              echo "Aplica√ß√£o est√° operacional!"
              exit 0
            fi
            
            if [ $i -eq 60 ]; then
              echo "ERRO: Timeout - aplica√ß√£o n√£o respondeu ap√≥s 60 tentativas"
              echo "Logs da aplica√ß√£o:"
              cat app.log
              exit 1
            fi
            
            sleep 2
          done

      - name: Verifica conectividade antes do scan
        run: |
          echo "Verificando conectividade com a aplica√ß√£o..."
          
          echo "IP local:"
          hostname -I
          
          echo "Portas abertas:"
          ss -tlnp | grep 3000 || echo "Porta 3000 n√£o encontrada"
          
          echo "Teste de conectividade:"
          curl -v http://localhost:3000/health || echo "ERRO: N√£o foi poss√≠vel conectar"

      - name: Executa OWASP ZAP Full Scan com logs detalhados
        run: |
          echo "Iniciando OWASP ZAP Full Scan..."
          echo "Alvo: http://localhost:3000"
          echo "Hora de in√≠cio: $(date)"
          
          # Executa ZAP e captura sa√≠da
          docker run --rm \
            --network="host" \
            -v $(pwd):/zap/wrk:rw \
            -u root \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://localhost:3000 \
            -r zap-report.html \
            -J zap-report.json \
            -a \
            -j \
            -m 10 \
            -T 600 \
            -z "-config spider.maxDuration=5 -config ajaxSpider.maxDuration=5" \
            2>&1 | tee zap-scan.log
          
          ZAP_EXIT=$?
          echo "ZAP exit code: $ZAP_EXIT"
          echo "Hora de t√©rmino: $(date)"
          
          echo "√öltimas 50 linhas do log do ZAP:"
          tail -50 zap-scan.log
          
          if [ $ZAP_EXIT -ne 0 ] && [ $ZAP_EXIT -ne 2 ]; then
            echo "AVISO: ZAP retornou c√≥digo de erro $ZAP_EXIT"
          fi

      - name: Verifica e valida arquivos gerados
        if: always()
        run: |
          echo "=== Verificando arquivos gerados pelo ZAP ==="
          
          echo "Todos os arquivos no diret√≥rio:"
          ls -lah
          
          echo ""
          echo "Buscando arquivos do ZAP em todo workspace:"
          find . -name "*.html" -o -name "*.json" -o -name "*.log" 2>/dev/null
          
          echo ""
          echo "=== An√°lise do zap-report.json ==="
          if [ -f "zap-report.json" ]; then
            echo "Arquivo encontrado!"
            echo "Tamanho: $(wc -c < zap-report.json) bytes"
            echo "Conte√∫do:"
            cat zap-report.json
            
            # Verifica se tem conte√∫do real
            ALERTS=$(jq '.site[0].alerts | length' zap-report.json 2>/dev/null || echo "0")
            echo "Total de alertas: $ALERTS"
            
            if [ "$ALERTS" -eq 0 ]; then
              echo "AVISO: JSON gerado mas sem alertas!"
              echo "Verificando logs do ZAP para diagn√≥stico..."
              if [ -f "zap-scan.log" ]; then
                echo "Procurando por erros no log:"
                grep -i "error\|exception\|failed" zap-scan.log | head -20
              fi
            fi
          else
            echo "ERRO: zap-report.json N√ÉO foi criado!"
            echo "Criando placeholder..."
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
          fi
          
          echo ""
          echo "=== An√°lise do zap-report.html ==="
          if [ -f "zap-report.html" ]; then
            echo "Arquivo encontrado!"
            echo "Tamanho: $(wc -c < zap-report.html) bytes"
            echo "Primeiras 10 linhas:"
            head -10 zap-report.html
            
            # Verifica se √© o HTML real do ZAP
            if grep -q "ZAP Scanning Report" zap-report.html; then
              echo "HTML REAL do ZAP detectado!"
            else
              echo "AVISO: HTML n√£o parece ser relat√≥rio real do ZAP"
            fi
          else
            echo "ERRO: zap-report.html N√ÉO foi criado!"
            echo "Criando placeholder..."
            echo '<!DOCTYPE html><html><head><title>ZAP Report</title></head>' > zap-report.html
            echo '<body><h1>OWASP ZAP Scan Report - ClickSeguro</h1>' >> zap-report.html
            echo '<p><strong>Status:</strong> Scan executado mas relat√≥rio HTML n√£o foi gerado pelo ZAP</p>' >> zap-report.html
            echo '<p>Verifique os logs do workflow para mais detalhes.</p></body></html>' >> zap-report.html
          fi

      - name: Instala jq para an√°lise
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analisa vulnerabilidades
        if: always()
        id: zapcheck
        run: |
          if [ ! -f "zap-report.json" ]; then
            echo "JSON n√£o encontrado, criando estrutura vazia"
            echo '{"site":[{"alerts":[]}]}' > zap-report.json
          fi

          total=$(jq '.site[0].alerts | length' zap-report.json)
          info=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-report.json)
          low=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-report.json)
          medium=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-report.json)
          high=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-report.json)
          critical=$(jq '[.site[0].alerts[] | select(.riskcode=="4")] | length' zap-report.json)

          echo "total=$total" >> $GITHUB_OUTPUT
          echo "info=$info" >> $GITHUB_OUTPUT
          echo "low=$low" >> $GITHUB_OUTPUT
          echo "medium=$medium" >> $GITHUB_OUTPUT
          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT

          echo "## Relat√≥rio de Seguran√ßa - ClickSeguro" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resumo de Vulnerabilidades por Severidade:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $critical |" >> $GITHUB_STEP_SUMMARY
          echo "| High | $high |" >> $GITHUB_STEP_SUMMARY
          echo "| Medium | $medium |" >> $GITHUB_STEP_SUMMARY
          echo "| Low | $low |" >> $GITHUB_STEP_SUMMARY
          echo "| Info | $info |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Top 10 Vulnerabilidades
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Top 10 Vulnerabilidades mais Comuns:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "zap-report.json" ] && [ "$(jq '.site[0].alerts | length' zap-report.json)" -gt 0 ]; then
            jq -r '.site[0].alerts[] | .name' zap-report.json \
              | sort | uniq -c | sort -nr | head -10 \
              | awk '{count=$1; $1=""; name=substr($0,2); printf "- %s (%d ocorr√™ncias)\n", name, count }' \
              >> $GITHUB_STEP_SUMMARY
          else
            echo "_Nenhuma vulnerabilidade detectada pelo scan_" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload dos Relat√≥rios e Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report-clickseguro
          path: |
            zap-report.html
            zap-report.json
            zap-scan.log
            app.log
          retention-days: 30

      - name: Verifica crit√©rios de falha
        if: always()
        run: |
          high=${{ steps.zapcheck.outputs.high }}
          critical=${{ steps.zapcheck.outputs.critical }}
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## An√°lise de Seguran√ßa" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "### Status: FALHOU" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Vulnerabilidades cr√≠ticas detectadas:**" >> $GITHUB_STEP_SUMMARY
            echo "- High: $high" >> $GITHUB_STEP_SUMMARY
            echo "- Critical: $critical" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "O deploy foi bloqueado automaticamente." >> $GITHUB_STEP_SUMMARY
            
            exit 1
          else
            echo "### Status: APROVADO" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Nenhuma vulnerabilidade cr√≠tica foi detectada." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Finaliza aplica√ß√£o
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            echo "Finalizando aplica√ß√£o (PID: $APP_PID)"
            kill $APP_PID 2>/dev/null || true
          fi
name: OWASP ZAP Security Scan - ClickSeguro

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  zap-security-scan:
    runs-on: ubuntu-latest
    name: Scan de Segurança com OWASP ZAP

    # Sobe um alvo vulnerável (Juice Shop) para o ZAP escanear
    services:
      juice-shop:
        image: bkimminich/juice-shop:latest
        ports:
          - 3000:3000
        options: >-
          --health-cmd "curl -f http://localhost:3000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 30

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Aguarda o serviço subir completamente
        run: |
          echo "🚀 Aguardando aplicação responder em http://localhost:3000..."
          for i in {1..60}; do
            if curl -fsS http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Aplicação está respondendo!"
              exit 0
            fi
            echo "⏳ Tentativa $i/60 - aguardando..."
            sleep 3
          done
          echo "❌ Aplicação não respondeu a tempo."
          exit 1

      # Executa o ZAP Baseline Scan e gera relatórios HTML e JSON
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a -m 5 -J zap-report.json -r zap-report.html'
          # -a = ativa scanners passivos adicionais
          # -m 5 = limita spider por 5 minutos
          # -J = gera relatório JSON
          # -r = gera relatório HTML

      - name: Instala dependências para análise
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analisa severidades e falha se High/Critical
        id: zap-analysis
        run: |
          echo "📊 Analisando resultados do scan de segurança..."
          
          # Verifica se o arquivo JSON foi gerado
          if [ ! -f "zap-report.json" ]; then
            echo "❌ Arquivo zap-report.json não encontrado!"
            exit 1
          fi

          # Conta alertas por riskcode (0=Info, 1=Low, 2=Medium, 3=High, 4=Critical)
          total=$(jq '.site[0].alerts | length' zap-report.json)
          info=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-report.json)
          low=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-report.json)
          medium=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-report.json)
          high=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-report.json)
          critical=$(jq '[.site[0].alerts[] | select(.riskcode=="4")] | length' zap-report.json)

          # Salva resultados para outros steps
          echo "total=$total" >> $GITHUB_OUTPUT
          echo "info=$info" >> $GITHUB_OUTPUT
          echo "low=$low" >> $GITHUB_OUTPUT
          echo "medium=$medium" >> $GITHUB_OUTPUT
          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT

          # Cria resumo para o GitHub Actions
          echo "## 🛡️ Relatório de Segurança - ClickSeguro" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Resumo de Vulnerabilidades por Severidade:" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 **Critical** | $critical |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 **High** | $high |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 **Medium** | $medium |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 **Low** | $low |" >> $GITHUB_STEP_SUMMARY
          echo "| ℹ️ **Info** | $info |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Verifica se há vulnerabilidades críticas ou altas
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "❌ **FALHA DE SEGURANÇA DETECTADA!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Foram encontradas **$high vulnerabilidades High** e **$critical vulnerabilidades Critical**." >> $GITHUB_STEP_SUMMARY
            echo "O deploy foi **BLOQUEADO** por questões de segurança." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Verifique o relatório HTML nos artefatos para mais detalhes." >> $GITHUB_STEP_SUMMARY
            
            # Falha o job
            echo "❌ Vulnerabilidades críticas detectadas! Bloqueando pipeline..."
            exit 1
          else
            echo "✅ **Nenhuma vulnerabilidade crítica detectada!**" >> $GITHUB_STEP_SUMMARY
            echo "Pipeline pode prosseguir com segurança." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Identifica tipos de vulnerabilidades mais comuns
        if: always() # Executa mesmo se o step anterior falhar
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Top 10 Vulnerabilidades mais Comuns:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lista os tipos mais comuns de vulnerabilidades
          jq -r '.site[0].alerts[] | .name' zap-report.json \
            | sort \
            | uniq -c \
            | sort -nr \
            | head -10 \
            | awk '{count=$1; $1=""; name=substr($0,2); printf "- **%s** (%d ocorrências)\n", name, count }' \
            >> $GITHUB_STEP_SUMMARY

      # Salva os relatórios como artefatos do GitHub Actions
      - name: Upload dos relatórios de segurança
        uses: actions/upload-artifact@v4
        if: always() # Sempre salva, mesmo se o scan falhar
        with:
          name: relatorio-seguranca-clickseguro
          path: |
            zap-report.html
            zap-report.json
          retention-days: 30

      - name: Comentário final
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "📄 **Relatórios disponíveis nos artefatos:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`zap-report.html\` - Relatório visual detalhado" >> $GITHUB_STEP_SUMMARY
          echo "- \`zap-report.json\` - Dados estruturados para automação" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Acesse os artefatos na aba **Actions** > **Este workflow** > **Artifacts**" >> $GITHUB_STEP_SUMMARY
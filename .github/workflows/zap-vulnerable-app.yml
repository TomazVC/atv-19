name: OWASP ZAP - ClickSeguro App Vulnerável

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permite executar manualmente

jobs:
  test-vulnerable-app:
    runs-on: ubuntu-latest
    name: Teste com Aplicação ClickSeguro Vulnerável

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instala dependências da aplicação
        run: npm install

      - name: Inicia aplicação ClickSeguro em background
        run: |
          echo "🚀 Iniciando aplicação ClickSeguro..."
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 5

      - name: Verifica se aplicação está respondendo
        run: |
          echo "🔍 Verificando se aplicação está ativa..."
          for i in {1..30}; do
            if curl -fsS http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Aplicação ClickSeguro está respondendo!"
              exit 0
            fi
            echo "⏳ Tentativa $i/30 - aguardando aplicação..."
            sleep 2
          done
          echo "❌ Aplicação não respondeu a tempo."
          exit 1

      - name: OWASP ZAP Baseline Scan na aplicação ClickSeguro
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a -m 3 -J clickseguro-zap.json -r clickseguro-zap.html'

      - name: Instala jq para análise dos resultados
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analisa vulnerabilidades encontradas
        id: vuln-analysis
        run: |
          echo "📊 Analisando vulnerabilidades na aplicação ClickSeguro..."
          
          if [ ! -f "clickseguro-zap.json" ]; then
            echo "❌ Arquivo de resultados não encontrado!"
            exit 1
          fi

          # Conta por severidade
          total=$(jq '.site[0].alerts | length' clickseguro-zap.json)
          info=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' clickseguro-zap.json)
          low=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' clickseguro-zap.json)
          medium=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' clickseguro-zap.json)
          high=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' clickseguro-zap.json)
          critical=$(jq '[.site[0].alerts[] | select(.riskcode=="4")] | length' clickseguro-zap.json)

          echo "total=$total" >> $GITHUB_OUTPUT
          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT

          # Relatório detalhado
          echo "## 🎯 Teste com Aplicação ClickSeguro Vulnerável" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Resultados do Scan OWASP ZAP:" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Critical | $critical |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 High | $high |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $medium |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 Low | $low |" >> $GITHUB_STEP_SUMMARY
          echo "| ℹ️ Info | $info |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Lista vulnerabilidades críticas e altas
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "### 🚨 Vulnerabilidades Críticas/Altas Detectadas:" >> $GITHUB_STEP_SUMMARY
            jq -r '.site[0].alerts[] | select(.riskcode=="3" or .riskcode=="4") | "- **\(.name)** (Risk: \(.riskdesc)) - \(.desc)"' clickseguro-zap.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Lista tipos de vulnerabilidades encontradas
        run: |
          echo "### 🔍 Detalhes das Vulnerabilidades:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lista todas as vulnerabilidades com detalhes
          jq -r '.site[0].alerts[] | "#### \(.name) (\(.riskdesc))\n- **Descrição:** \(.desc)\n- **Solução:** \(.solution)\n- **URLs Afetadas:** \(.instances | length) instância(s)\n"' clickseguro-zap.json >> $GITHUB_STEP_SUMMARY

      - name: Verifica se pipeline deve falhar
        run: |
          high=${{ steps.vuln-analysis.outputs.high }}
          critical=${{ steps.vuln-analysis.outputs.critical }}
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          
          if [ "$high" -gt 0 ] || [ "$critical" -gt 0 ]; then
            echo "## ❌ PIPELINE FALHOU - VULNERABILIDADES CRÍTICAS DETECTADAS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Motivo:** Foram encontradas $high vulnerabilidades High e $critical vulnerabilidades Critical." >> $GITHUB_STEP_SUMMARY
            echo "**Ação:** O deploy foi bloqueado automaticamente por questões de segurança." >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:** Corrija as vulnerabilidades e execute o pipeline novamente." >> $GITHUB_STEP_SUMMARY
            
            # Mata a aplicação antes de falhar
            if [ ! -z "$APP_PID" ]; then
              kill $APP_PID 2>/dev/null || true
            fi
            
            exit 1
          else
            echo "## ✅ PIPELINE APROVADO - SEGURANÇA OK" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Nenhuma vulnerabilidade crítica detectada. Deploy pode prosseguir." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload dos relatórios (sempre executa)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: clickseguro-security-reports
          path: |
            clickseguro-zap.html
            clickseguro-zap.json
          retention-days: 30

      - name: Finaliza aplicação
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            echo "🛑 Finalizando aplicação ClickSeguro (PID: $APP_PID)..."
            kill $APP_PID 2>/dev/null || true
          fi